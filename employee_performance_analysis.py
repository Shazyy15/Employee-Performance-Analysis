# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset from the CSV file
df = pd.read_csv('employee_performance_data.csv')

# Convert 'Date' to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Display the first few rows of the dataset
print("Dataset:")
print(df.head())

# 1. Calculate total tasks completed by each employee
employee_tasks = df.groupby('EmployeeID')['TasksCompleted'].sum().reset_index()
employee_tasks.columns = ['EmployeeID', 'TotalTasksCompleted']

# 2. Calculate total sales generated by each employee
employee_sales = df.groupby(['EmployeeID', 'EmployeeName'])['SalesGenerated'].sum().reset_index()
employee_sales.columns = ['EmployeeID', 'EmployeeName', 'TotalSalesGenerated']

# 3. Analyze performance trends over time (Tasks Completed per month)
df['YearMonth'] = df['Date'].dt.to_period('M')
monthly_tasks = df.groupby(['EmployeeID', 'YearMonth'])['TasksCompleted'].sum().reset_index()

# 4. Analyze monthly sales trends over time (Sales Generated per month)
monthly_sales = df.groupby(['EmployeeID', 'YearMonth'])['SalesGenerated'].sum().reset_index()

# --- Visualizations ---

# 1. Total Tasks Completed per Employee (Bar Chart)
plt.figure(figsize=(10, 6))
plt.bar(employee_tasks['EmployeeID'], employee_tasks['TotalTasksCompleted'], color='skyblue', edgecolor='black')
plt.title('Total Tasks Completed per Employee (Data Analyst: Shazil Shahid)', fontsize=14, fontweight='bold')
plt.xlabel('EmployeeID', fontsize=12)
plt.ylabel('Total Tasks Completed', fontsize=12)
plt.xticks(employee_tasks['EmployeeID'])
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# 2. Monthly Performance Trends (Line Chart)
plt.figure(figsize=(10, 6))
for employee_id in df['EmployeeID'].unique():
    employee_data = monthly_tasks[monthly_tasks['EmployeeID'] == employee_id]
    plt.plot(employee_data['YearMonth'].astype(str), employee_data['TasksCompleted'], marker='o', label=f'Employee {employee_id}')

plt.title('Monthly Tasks Completed per Employee (Data Analyst: Shazil Shahid)', fontsize=14, fontweight='bold')
plt.xlabel('Year-Month', fontsize=12)
plt.ylabel('Tasks Completed', fontsize=12)
plt.xticks(rotation=90)
plt.legend(title='EmployeeID')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# 3. Total Sales Generated per Employee (Pie Chart for Top 10 Employees)

# Sort the employees by total sales generated and select the top 10
top_10_sales = employee_sales.sort_values(by='TotalSalesGenerated', ascending=False).head(10)

# Plot a pie chart for the top 10 employees
plt.figure(figsize=(8, 8))
plt.pie(top_10_sales['TotalSalesGenerated'], labels=top_10_sales['EmployeeName'], autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)
plt.title('Sales Contribution by Top 10 Employees (Data Analyst: Shazil Shahid)', fontsize=14, fontweight='bold')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.tight_layout()
plt.show()

# 4. Monthly Sales for Top 10 Employees (Line Chart)
plt.figure(figsize=(10, 6))
for employee_id in top_10_sales['EmployeeID']:
    employee_data = monthly_sales[monthly_sales['EmployeeID'] == employee_id]
    plt.plot(employee_data['YearMonth'].astype(str), employee_data['SalesGenerated'], marker='o', label=f'Employee {employee_id}')

plt.title('Monthly Sales for Top 10 Employees (Data Analyst: Shazil Shahid)', fontsize=14, fontweight='bold')
plt.xlabel('Year-Month', fontsize=12)
plt.ylabel('Sales Generated', fontsize=12)
plt.xticks(rotation=90)
plt.legend(title='EmployeeID')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# 5. New Window: Display Top 10 Employees' Details in a Table
top_10_employee_details = df[df['EmployeeID'].isin(top_10_sales['EmployeeID'])].drop_duplicates(subset='EmployeeID')

fig, ax = plt.subplots(figsize=(8, 6))
ax.axis('tight')
ax.axis('off')
table_data = top_10_employee_details[['EmployeeID', 'EmployeeName', 'Date', 'HoursWorked', 'TasksCompleted', 'SalesGenerated']].values
columns = ['EmployeeID', 'EmployeeName', 'Date', 'HoursWorked', 'TasksCompleted', 'SalesGenerated']

# Display the table
ax.table(cellText=table_data, colLabels=columns, cellLoc='center', loc='center')

plt.title('Top 10 Employees Details (Data Analyst: Shazil Shahid)', fontsize=14, fontweight='bold')
plt.tight_layout()
plt.show()

# Display final results in a tabular format
print("\nTotal Tasks Completed per Employee:")
print(employee_tasks)

print("\nTotal Sales Generated per Employee (Top 10):")
print(top_10_sales)

print("\nMonthly Tasks Completed per Employee:")
print(monthly_tasks)
